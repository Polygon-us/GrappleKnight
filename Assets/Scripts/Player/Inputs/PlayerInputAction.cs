//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerSkillActionMap"",
            ""id"": ""f44d4954-4d8f-4ec8-95f4-e06d08d449df"",
            ""actions"": [
                {
                    ""name"": ""ChangeSkill"",
                    ""type"": ""Button"",
                    ""id"": ""b37e0844-e59f-4916-8079-f0a9f2bd78e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowLeftSkill"",
                    ""type"": ""Button"",
                    ""id"": ""b5a47de5-4339-4014-86a0-997656096809"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThorwRightSkill"",
                    ""type"": ""Button"",
                    ""id"": ""e9015907-c5a4-415f-a8ec-0094e86e0c93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20ac0d84-2e1d-4cec-9df8-6fd4fe69cfa7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9331ab7b-5ba2-426e-885f-208f0d2f02f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowLeftSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6fd24c5-8ef7-4864-98e6-249f86871228"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThorwRightSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""b1c31cfe-835b-4ed7-9d98-a2827bcfa28f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""75c4365e-1eaa-4553-86c8-ec7ca387b83d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""85c6a2af-7b1d-4bf8-ac17-6cf495ae23d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""af58362f-5109-4648-8d76-51e2aa4c8fdf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e1bc972-f9a9-46b2-b09f-e5ac2d963bd7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5a77086-529a-401b-9e7a-7c53e739126b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57597124-256f-457c-b29c-5526c7ddf317"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a63877d4-d58f-485d-bf29-403f8bfcee43"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d0a53a89-613f-4d8b-872e-b7867ba0f876"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerSkillActionMap
        m_PlayerSkillActionMap = asset.FindActionMap("PlayerSkillActionMap", throwIfNotFound: true);
        m_PlayerSkillActionMap_ChangeSkill = m_PlayerSkillActionMap.FindAction("ChangeSkill", throwIfNotFound: true);
        m_PlayerSkillActionMap_ThrowLeftSkill = m_PlayerSkillActionMap.FindAction("ThrowLeftSkill", throwIfNotFound: true);
        m_PlayerSkillActionMap_ThorwRightSkill = m_PlayerSkillActionMap.FindAction("ThorwRightSkill", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerSkillActionMap
    private readonly InputActionMap m_PlayerSkillActionMap;
    private List<IPlayerSkillActionMapActions> m_PlayerSkillActionMapActionsCallbackInterfaces = new List<IPlayerSkillActionMapActions>();
    private readonly InputAction m_PlayerSkillActionMap_ChangeSkill;
    private readonly InputAction m_PlayerSkillActionMap_ThrowLeftSkill;
    private readonly InputAction m_PlayerSkillActionMap_ThorwRightSkill;
    public struct PlayerSkillActionMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerSkillActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeSkill => m_Wrapper.m_PlayerSkillActionMap_ChangeSkill;
        public InputAction @ThrowLeftSkill => m_Wrapper.m_PlayerSkillActionMap_ThrowLeftSkill;
        public InputAction @ThorwRightSkill => m_Wrapper.m_PlayerSkillActionMap_ThorwRightSkill;
        public InputActionMap Get() { return m_Wrapper.m_PlayerSkillActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerSkillActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerSkillActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerSkillActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerSkillActionMapActionsCallbackInterfaces.Add(instance);
            @ChangeSkill.started += instance.OnChangeSkill;
            @ChangeSkill.performed += instance.OnChangeSkill;
            @ChangeSkill.canceled += instance.OnChangeSkill;
            @ThrowLeftSkill.started += instance.OnThrowLeftSkill;
            @ThrowLeftSkill.performed += instance.OnThrowLeftSkill;
            @ThrowLeftSkill.canceled += instance.OnThrowLeftSkill;
            @ThorwRightSkill.started += instance.OnThorwRightSkill;
            @ThorwRightSkill.performed += instance.OnThorwRightSkill;
            @ThorwRightSkill.canceled += instance.OnThorwRightSkill;
        }

        private void UnregisterCallbacks(IPlayerSkillActionMapActions instance)
        {
            @ChangeSkill.started -= instance.OnChangeSkill;
            @ChangeSkill.performed -= instance.OnChangeSkill;
            @ChangeSkill.canceled -= instance.OnChangeSkill;
            @ThrowLeftSkill.started -= instance.OnThrowLeftSkill;
            @ThrowLeftSkill.performed -= instance.OnThrowLeftSkill;
            @ThrowLeftSkill.canceled -= instance.OnThrowLeftSkill;
            @ThorwRightSkill.started -= instance.OnThorwRightSkill;
            @ThorwRightSkill.performed -= instance.OnThorwRightSkill;
            @ThorwRightSkill.canceled -= instance.OnThorwRightSkill;
        }

        public void RemoveCallbacks(IPlayerSkillActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerSkillActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerSkillActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerSkillActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerSkillActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerSkillActionMapActions @PlayerSkillActionMap => new PlayerSkillActionMapActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Jump;
    public struct PlayerMovementActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerMovementActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    public interface IPlayerSkillActionMapActions
    {
        void OnChangeSkill(InputAction.CallbackContext context);
        void OnThrowLeftSkill(InputAction.CallbackContext context);
        void OnThorwRightSkill(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
